import threading
from typing import List

import logging
import networkx

from pacu.aws.lib.lq import Lq
from pacu.aws.lib.role import Role
from pacu.lib.utils import has_assumed, run_thread

logging = logging.getLogger('bruteforce_role')


class BruteforceRole:
    def __init__(self, graph: networkx.Graph, discovered_queue: Lq, access_queue: Lq):
        self.graph = graph
        self.discovered_queue = discovered_queue
        self.access_queue = access_queue

        self.threads: List[threading.Thread] = []

    def run(self):
        for role in self.access_queue.each():
            self.threads.append(run_thread(self.assume_discovered, role))

        self.wait()

    def assume_discovered(self, role: Role):
        discovered: Role
        for discovered in self.discovered_queue.each():
            if has_assumed(self.graph, discovered.arn, role.arn):
                continue

            logging.info(f"attempting to assume {role.name} -> {discovered}")
            new_role = role.assume(discovered.arn)
            if new_role:
                print(f"found new access: {new_role.arn}")
                self.graph.add_edge(role, new_role)
                self.access_queue.broadcast(new_role)

    def wait(self):
        for thread in self.threads:
            thread.join()
