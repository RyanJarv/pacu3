import dataclasses
import typing
from contextlib import contextmanager
from enum import Enum

from dataclasses import dataclass
from typing import List, Optional

import tinydb.table
from tinydb import where

from pacu import config


class State(str, Enum):
    Created = "created"
    Added = "added"


@dataclass(kw_only=True)
class BaseResource:
    Type: str = dataclasses.field(init=False)

    Id: str
    State: Optional[State] = None

    def __post_init__(self):
        self.Type = self.__class__.__name__

# TODO: Check if resources exist before yielding.
class Resource:
    @staticmethod
    @contextmanager
    def new(resource: BaseResource):
        try:
            yield
        finally:
            d = dataclasses.asdict(resource)
            query = (where('Type') == resource.Type) & (where('Id') == resource.Id)
            config.resources().upsert(d, query)

    @staticmethod
    def list(klass: typing.Type):
        query = where('Type') == klass.__name__
        records = config.resources().search(query)

        for record in records:
            del record['Type']
            yield klass(**record)


    @staticmethod
    @contextmanager
    def modify(resource: BaseResource):
        obj = Resource.get(resource)

        try:
            yield obj
        finally:
            config.resources().update(
                dataclasses.asdict(obj),
                (where('Type') == resource.__class__.__name__) & (where('Id') == resource.Id),
            )

    @contextmanager
    def delete(self, resource: BaseResource):
        try:
            yield
        finally:
            config.resources().remove(
                (where('Type') == resource.__class__.__name__)
                & (where('Id') == resource.Id)
            )

    @classmethod
    def get(cls, resource: BaseResource):
        query = (where('Type') == resource.__class__.__name__) \
                & (where('Id') == resource.Id)

        records = config.resources().search(query)
        assert len(records) == 1
        record = records[0]

        # Type is autogenerated based on the class type. Remove it here, so it doesn't error when populating the class
        del record['Type']

        return resource.__class__(**record)


def list(_type: Optional[str]) -> List[tinydb.table.Document]:
    return config.resources().search(where('type') == _type)