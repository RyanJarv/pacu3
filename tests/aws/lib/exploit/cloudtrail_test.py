import os
from datetime import datetime, timedelta
from unittest import mock

import boto3
import moto
import networkx
import pytest

from pacu.aws.lib.exploit.role_bruteforce import BruteforceRole
from pacu.aws.lib.lq import Lq
from pacu.aws.lib.role import Role


@pytest.fixture(scope='function')
def aws_credentials():
    """Mocked AWS Credentials for moto."""
    os.environ['AWS_ACCESS_KEY_ID'] = 'testing'
    os.environ['AWS_SECRET_ACCESS_KEY'] = 'testing'
    os.environ['AWS_SECURITY_TOKEN'] = 'testing'
    os.environ['AWS_SESSION_TOKEN'] = 'testing'
    os.environ['AWS_DEFAULT_REGION'] = 'us-east-1'


@pytest.fixture(scope='function')
def sess(aws_credentials):
    with moto.mock_sts():
        yield boto3.Session()


def test_run(sess):
    access_queue = Lq()
    discovered_queue = Lq()
    g = networkx.Graph()
    source_arn = "arn:aws:iam::123456789012:user/source"
    target_arn = "arn:aws:iam::123456789012:role/target"
    g.add_node(Role(graph=g, arn=source_arn))
    g.add_node(Role(graph=g, arn=target_arn))

    cloudtrail = BruteforceRole(graph=g, discovered_queue=discovered_queue, access_queue=access_queue)

    access_queue.broadcast(Role(graph=g, arn=source_arn, session=sess))
    discovered_queue.broadcast(Role(graph=g, arn=target_arn, session=sess))

    cloudtrail.run()
